import { BrowserWindow, app, ipcMain, screen } from "electron";
import { WindowPos, WindowSize } from "#types/config";
import { createWindow, makeWindow } from "@utils/window";

import { PluginGitHub } from "#types/plugin";
import type { Windows } from "#types/window";
import defaultConfig from "@config/defaults";
import { download } from "electron-dl";
import { initializePlugins } from "@utils/plugins";
import is from "electron-is";
import path from "path";
import { setApplicationMenu } from "./menu";
import { store } from "@config/store";

console.log("youtube-music-desktop started");

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
// Plugin Install Window
// declare const PLUGIN_INSTALL_WINDOW_WEBPACK_ENTRY: string;
// declare const PLUGIN_INSTALL_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
	app.quit();
}

let windows: Windows = {
	main: null,
	pluginsInstall: null,
};

const createMainWindow = () => {
	const urlToLoad = store.get("options.resumeOnStart")
		? store.get("url")
		: defaultConfig.url;
	windows.main = makeWindow({
		PRELOAD: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		URL: urlToLoad,
	});
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
	// createMainWindow();
	const urlToLoad = store.get("options.resumeOnStart")
		? store.get("url")
		: defaultConfig.url;
	let moveTimer: ReturnType<typeof setTimeout>;
	let resizeTimer: ReturnType<typeof setTimeout>;
	windows.main = createWindow({
		urlToLoad: urlToLoad,
		preloadPath: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		onReadyToShow: function (this: BrowserWindow) {
			console.log(this);
			// const [xPos, yPos] = windows.main.getPosition();
			// store.set({ window: { pos: { x: xPos, y: yPos } } });
			// const [width, height] = windows.main.getSize();
			// store.set({
			// 	window: { size: { width: width, height: height } },
			// });
			// console.log(
			// 	`initialized window at pos [${store.get(
			// 		"window.pos"
			// 	)}] and size [${store.get("window.size")}]`
			// );
		},
		onMove: () => {
			clearTimeout(moveTimer);
			moveTimer = setTimeout(() => {
				const [xPos, yPos] = windows.main.getPosition();
				if (xPos && yPos) {
					try {
						store.set({ window: { pos: { x: xPos, y: yPos } } });
						// store.set({ "window.pos.x": xPos, "window.pos.y": yPos });
						console.log(`saved window coords [${xPos} | ${yPos}]`);
					} catch (error) {
						console.error(error);
					}
				}
			}, 5000);
		},
		onResize: () => {
			clearTimeout(resizeTimer);
			resizeTimer = setTimeout(() => {
				const [width, height] = windows.main.getSize();
				if (width && height) {
					try {
						store.set({
							window: { size: { width: width, height: height } },
						});
						// store.set({
						// 	"window.size.width": width,
						// 	"window.size.height": height,
						// });
						console.log(`saved window size [${width} | ${height}]`);
					} catch (error) {
						console.error(error);
					}
				}
			}, 5000);
		},
	});
	initializePlugins(windows.main);
	setApplicationMenu(windows);

	//? Set window last config or default config

	try {
		const hasPos = store.has("window.pos");
		const hasSize = store.has("window.size");
		if (hasPos && hasSize) {
			//? Check if window is offscreen
			const pos: WindowPos = store.get("window.pos");
			const size: WindowSize = store.get("window.size");
			const displaySize = screen.getDisplayNearestPoint({
				x: pos.x,
				y: pos.y,
			}).bounds;
			if (
				pos.x + size.width < displaySize.x - 8 ||
				pos.x - size.width > displaySize.x + displaySize.width ||
				pos.y < displaySize.y - 8 ||
				pos.y > displaySize.y + displaySize.height
			) {
				//Window is offscreen
				if (is.dev()) {
					console.error(
						`Window tried to render offscreen, windowSize=${size}, displaySize=${displaySize}, position=${pos}`
					);
				}
			} else {
				windows.main.setPosition(pos.x, pos.y);
				windows.main.setSize(size.width, size.height);
				console.log(
					`window spawned at position: [${pos.x} | ${pos.y}] and size: [${size.width} | ${size.height}]`
				);
			}
		}

		if (store.get("window.maximized")) {
			windows.main.maximize();
		}
		if (store.get("window.alwaysOnTop")) {
			windows.main.setAlwaysOnTop(true);
		}
	} catch (error) {
		console.error(error);
	}
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
	if (process.platform !== "darwin") {
		app.quit();
	}
});

app.on("activate", () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createMainWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// IPC Handlers
ipcMain.on("fetch-plugins", async (e) => {
	const plugins = await fetch(
		"https://api.github.com/repos/erikenz/youtube-music-desktop-add-ons/contents/plugins"
	).then((response) => response.json());

	e.returnValue = plugins;
});
ipcMain.on("download-plugin", async (_, payload: PluginGitHub) => {
	const win = windows.main;
	try {
		const pluginFolder = await fetch(
			`https://api.github.com/repos/erikenz/youtube-music-desktop-add-ons/contents/plugins/${payload.name}`
		).then((res) => res.json());
		if (payload.type !== "dir") return Error("Not a directory");
		// console.log(
		// 	`ðŸš€ => file: main.ts:124 => ipcMain.on => pluginFolder:`,
		// 	pluginFolder
		// );
		pluginFolder.forEach(async (file: PluginGitHub) => {
			download(win, file.download_url, {
				directory: path.join(
					__dirname,
					`../../src/plugins/test/${payload.name}`
				),
				onProgress(progress) {
					console.log("Progress:", progress);
				},
				onTotalProgress(progress) {
					console.log("Total:", progress);
				},
				onCompleted(item) {
					console.log("Completed:", item);
				},
				overwrite: true,
			});
		});
	} catch (error) {
		console.error(error);
	}
});
// ipcMain.on("open_page", (e, page) => {
// 	pluginInstallWindow = makeWindow(
// 		PLUGIN_INSTALL_WINDOW_PRELOAD_WEBPACK_ENTRY,
// 		PLUGIN_INSTALL_WINDOW_WEBPACK_ENTRY,
// 		{
// 			title: "Window 2",
// 			width: 600,
// 			height: 400,
// 		}
// 	);
// });
// const handleOpenPage = () => {};
// ipcMain.handle("openPage", handleOpenPage);
