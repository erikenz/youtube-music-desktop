import { BrowserWindow, app, ipcMain } from "electron";

import { PluginGitHub } from "./types/plugin.d";
import type { Windows } from "#types/main";
import defaultConfig from "@config/defaults";
import { download } from "electron-dl";
import https from "https";
import { initializePlugins } from "@utils/plugins";
import { makeWindow } from "@utils/window";
import path from "path";
import { setApplicationMenu } from "./menu";

console.log("youtube-music-desktop started");

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
// Plugin Install Window
declare const PLUGIN_INSTALL_WINDOW_WEBPACK_ENTRY: string;
declare const PLUGIN_INSTALL_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
	app.quit();
}

let windows: Windows = {
	main: null,
	pluginsInstall: null,
};
const createMainWindow = () => {
	windows.main = makeWindow({
		PRELOAD: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		URL: defaultConfig.url,
	});
	initializePlugins(windows.main);
	setApplicationMenu(windows);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createMainWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
	if (process.platform !== "darwin") {
		app.quit();
	}
});

app.on("activate", () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createMainWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// IPC Handlers
ipcMain.on("greet", (e, message) => {
	console.log(message);
});
ipcMain.on("fetch-plugins", async (e) => {
	const plugins = await fetch(
		"https://api.github.com/repos/erikenz/youtube-music-desktop-add-ons/contents/plugins"
	).then((response) => response.json());

	e.returnValue = plugins;
});
ipcMain.on("download-plugin", async (e, payload: PluginGitHub) => {
	const win = windows.main;
	try {
		const pluginFolder = await fetch(
			`https://api.github.com/repos/erikenz/youtube-music-desktop-add-ons/contents/plugins/${payload.name}`
		).then((res) => res.json());
		if (payload.type !== "dir") return Error("Not a directory");
		// console.log(
		// 	`ðŸš€ => file: main.ts:124 => ipcMain.on => pluginFolder:`,
		// 	pluginFolder
		// );
		pluginFolder.forEach(async (file: PluginGitHub) => {
			download(win, file.download_url, {
				directory: path.join(
					__dirname,
					`../../src/plugins/test/${payload.name}`
				),
				onProgress(progress) {
					console.log("Progress:", progress);
				},
				onTotalProgress(progress) {
					console.log("Total:", progress);
				},
				onCompleted(item) {
					console.log("Completed:", item);
				},
				overwrite: true,
			});
		});
	} catch (error) {
		console.error(error);
	}
});
// ipcMain.on("open_page", (e, page) => {
// 	pluginInstallWindow = makeWindow(
// 		PLUGIN_INSTALL_WINDOW_PRELOAD_WEBPACK_ENTRY,
// 		PLUGIN_INSTALL_WINDOW_WEBPACK_ENTRY,
// 		{
// 			title: "Window 2",
// 			width: 600,
// 			height: 400,
// 		}
// 	);
// });
// const handleOpenPage = () => {};
// ipcMain.handle("openPage", handleOpenPage);
