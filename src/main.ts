import { BrowserWindow, app, ipcMain } from "electron";
import { createStore, store } from "@config/store";
import { getAllPlugins, loadPlugins } from "@utils/plugins";

import type { PluginConfig } from "#types/config";
import type { PluginGitHub } from "#types/plugin";
import type { Windows } from "#types/window";
import { createMainWindow } from "@windows/main";
import { download } from "electron-dl";
import path from "path";
import { setAppMenu } from "@utils/menu";

console.log("youtube-music-desktop started");

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
// declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
// Plugin Install Window
// declare const PLUGIN_INSTALL_WINDOW_WEBPACK_ENTRY: string;
// declare const PLUGIN_INSTALL_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
	app.quit();
}

let windows: Windows = {
	main: null,
	pluginsInstall: null,
	pluginsManage: null,
	themesInstall: null,
	themesManage: null,
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", async () => {
	createStore();
	windows.main = createMainWindow();
	loadPlugins(windows.main);
	setAppMenu(windows);
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
	if (process.platform !== "darwin") {
		app.quit();
	}
});

app.on("activate", () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		windows.main = createMainWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// IPC Handlers
ipcMain.on("fetch-plugins", async (e) => {
	const plugins: PluginGitHub[] = await fetch(
		"https://api.github.com/repos/erikenz/youtube-music-desktop-add-ons/contents/plugins"
	).then((response) => response.json());

	e.returnValue = plugins;
});
ipcMain.on("download-plugin", async (_, payload: PluginGitHub) => {
	const win = windows.main;
	try {
		const pluginFolder = await fetch(
			`https://api.github.com/repos/erikenz/youtube-music-desktop-add-ons/contents/plugins/${payload.name}`
		).then((res) => res.json());
		if (payload.type !== "dir") return Error("Not a directory");
		pluginFolder.forEach(async (file: PluginGitHub) => {
			download(win, file.download_url, {
				directory: path.join(
					__dirname,
					`../../src/plugins/test/${payload.name}`
				),
				onProgress(progress) {
					console.log("Progress:", progress);
				},
				onTotalProgress(progress) {
					console.log("Total:", progress);
				},
				onCompleted(item) {
					console.log("Completed:", item);
				},
				overwrite: true,
			});
		});
	} catch (error) {
		console.error(error);
	}
});
ipcMain.on("get-installed-plugins", (e) => {
	const plugins = getAllPlugins();
	const pluginConfig = store.get("plugins") as PluginConfig;
	console.log(
		`TCL -> file: main.ts:108 -> ipcMain.on -> pluginConfig:`,
		pluginConfig
	);

	const pluginArr = plugins.map((plugin) => {
		if (pluginConfig) {
			return {
				...plugin,
				...pluginConfig[plugin.name],
			};
		}
	});
	e.returnValue = pluginArr;
});
