console.log("youtube-music-desktop started");

import { BrowserWindow, Menu, app, ipcMain } from "electron";

import type { Windows } from "#types/main";
import defaultConfig from "@config/defaults";
import { initializePlugins } from "@utils/plugins";
import { makeWindow } from "@utils/window";
import path from "path";
import { setApplicationMenu } from "./menu";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
// Plugin Install Window
declare const PLUGIN_INSTALL_WINDOW_WEBPACK_ENTRY: string;
declare const PLUGIN_INSTALL_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
	app.quit();
}

let windows: Windows = {
	main: null,
	pluginsInstall: null,
};
// let mainWindow, pluginInstallWindow;
const createMainWindow = () => {
	windows.main = makeWindow(
		MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		defaultConfig.url
		// MAIN_WINDOW_WEBPACK_ENTRY,
		// { title: "Window 1" }
	);
	// const mainWindow = new BrowserWindow({
	// 	width: defaultConfig.windowSize.width,
	// 	height: defaultConfig.windowSize.height,
	// 	webPreferences: {
	// 		nodeIntegration: true,
	// 		contextIsolation: false,
	// 		preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
	// 	},
	// 	// webPreferences: {
	// 	// 	// preload: path.join(__dirname, "preload.ts"),
	// 	// 	preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
	// 	// },
	// 	show: false,
	// });
	// mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
	// // mainWindow.loadURL(defaultConfig.url);
	// mainWindow.once("ready-to-show", () => mainWindow.show());
	initializePlugins(windows.main);
	setApplicationMenu(windows);
	// const menu = Menu.buildFromTemplate([
	// 	{
	// 		label: "Plugins",
	// 		click: () => {
	// 			pluginInstallWindow = makeWindow(
	// 				PLUGIN_INSTALL_WINDOW_PRELOAD_WEBPACK_ENTRY,
	// 				PLUGIN_INSTALL_WINDOW_WEBPACK_ENTRY,
	// 				{
	// 					title: "Window 2",
	// 					width: 600,
	// 					height: 400,
	// 				}
	// 			);
	// 		},
	// 	},
	// ]);
	// Menu.setApplicationMenu(menu);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createMainWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
	if (process.platform !== "darwin") {
		app.quit();
	}
});

app.on("activate", () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createMainWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// ipcMain.on("open_page", (e, page) => {
// 	pluginInstallWindow = makeWindow(
// 		PLUGIN_INSTALL_WINDOW_PRELOAD_WEBPACK_ENTRY,
// 		PLUGIN_INSTALL_WINDOW_WEBPACK_ENTRY,
// 		{
// 			title: "Window 2",
// 			width: 600,
// 			height: 400,
// 		}
// 	);
// });
// const handleOpenPage = () => {};
// ipcMain.handle("openPage", handleOpenPage);
